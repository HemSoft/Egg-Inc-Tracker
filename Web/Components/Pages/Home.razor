@page "/"
@using HemSoft.EggIncTracker.Data
@using HemSoft.EggIncTracker.Data.Dtos

<PageTitle>Home</PageTitle>

<h1>Egg Inc -- Player Stats!</h1>

@code {
    private readonly EggIncContext _context = new EggIncContext();
    protected PlayerDto? DbPlayer1;
    protected PlayerDto? DbPlayer2;
    protected PlayerDto? DbPlayer3;
    protected PlayerDto? DbPlayer4;
    protected double Progress1;
    protected double Progress2;
    protected double Progress3;
    protected double Progress4;
    protected DateTime UpdatedCst1;
    protected DateTime UpdatedCst2;
    protected DateTime UpdatedCst3;
    protected DateTime UpdatedCst4;
    protected DateTime ProjectedCst1;
    protected DateTime ProjectedCst2;
    protected DateTime ProjectedCst3;
    protected DateTime ProjectedCst4;

    protected override void OnInitialized()
    {
        // Player 1:
        DbPlayer1 = _context.Players
            .Where(x => x.EID == "EI6335140328505344")
            .OrderByDescending(z => z.Updated)
            .FirstOrDefault();
        Progress1 = DbPlayer1?.TitleProgress ?? 0;
        Progress1 = Math.Round(Progress1, 2);

        var cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");

        if (DbPlayer1 != null)
        {
            var updatedUtc1 = DbPlayer1.Updated;
            UpdatedCst1 = TimeZoneInfo.ConvertTimeFromUtc(updatedUtc1, cstZone);

            var projectedUtc1 = DbPlayer1.ProjectedTitleChange;
            ProjectedCst1 = TimeZoneInfo.ConvertTimeFromUtc(projectedUtc1, cstZone);
        }

        // Player 2:
        DbPlayer2 = _context.Players
            .Where(x => x.EID == "EI5435770400276480")
            .OrderByDescending(z => z.Updated)
            .FirstOrDefault();
        Progress2 = DbPlayer2?.TitleProgress ?? 0;
        Progress2 = Math.Round(Progress2, 2);

        if (DbPlayer2 != null)
        {
            var updatedUtc2 = DbPlayer2.Updated;
            UpdatedCst2 = TimeZoneInfo.ConvertTimeFromUtc(updatedUtc2, cstZone);

            var projectedUtc2 = DbPlayer2.ProjectedTitleChange;
            ProjectedCst2 = TimeZoneInfo.ConvertTimeFromUtc(projectedUtc2, cstZone);
        }

        // Player 3:
        DbPlayer3 = _context.Players
            .Where(x => x.EID == "EI6306349753958400")
            .OrderByDescending(z => z.Updated)
            .FirstOrDefault();
        Progress3 = DbPlayer3?.TitleProgress ?? 0;
        Progress3 = Math.Round(Progress3, 2);

        if (DbPlayer3 != null)
        {
            var updatedUtc3 = DbPlayer3.Updated;
            UpdatedCst3 = TimeZoneInfo.ConvertTimeFromUtc(updatedUtc3, cstZone);

            var projectedUtc3 = DbPlayer3.ProjectedTitleChange;
            ProjectedCst3 = TimeZoneInfo.ConvertTimeFromUtc(projectedUtc3, cstZone);
        }

        // Player 4:
        DbPlayer4 = _context.Players
            .Where(x => x.EID == "EI6725967592947712")
            .OrderByDescending(z => z.Updated)
            .FirstOrDefault();
        Progress4 = DbPlayer4?.TitleProgress ?? 0;
        Progress4 = Math.Round(Progress4, 2);

        if (DbPlayer4 != null)
        {
            var updatedUtc4 = DbPlayer4.Updated;
            UpdatedCst4 = TimeZoneInfo.ConvertTimeFromUtc(updatedUtc4, cstZone);

            var projectedUtc4 = DbPlayer4.ProjectedTitleChange;
            ProjectedCst4 = TimeZoneInfo.ConvertTimeFromUtc(projectedUtc4, cstZone);
        }
    }



    LineChart<double> lineChart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 3,
            CubicInterpolationMode = "monotone",
        };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble() };
    }


}

<table class="table">
    <thead>
        <tr>
            <th>Player</th>
            <th>Title</th>
            <th>Progress</th>
            <th>Next Title</th>
            <th>Projected</th>
            <th>SE</th>
            <th>PE</th>
            <th>EB</th>
            <th>Updated</th>
            <th>LLC</th>
            <th>MER</th>
            <th>JER</th>
        </tr>
    </thead>
    <tr>
        <td>King Friday!</td>
        <td>@DbPlayer1?.Title</td>
@*         <td>@string.Format("{0:0.00}", dbPlayer1?.TitleProgress)%</td>
        *@
        <td>@DbPlayer1?.NextTitle</td>
        <td>@ProjectedCst1</td>
        <td>@DbPlayer1?.SoulEggs</td>
        <td>@DbPlayer1?.ProphecyEggs</td>
        <td>@DbPlayer1?.EarningsBonusPercentage</td>
        <td>@UpdatedCst1</td>
        <td>@DbPlayer1?.LLC</td>
        <td>@DbPlayer1?.MER</td>
        <td>@DbPlayer1?.JER</td>
    </tr>
    <tr>
        <td>King Saturday!</td>
        <td>@DbPlayer2?.Title</td>
        <td>@DbPlayer2?.NextTitle</td>
        <td>@ProjectedCst2</td>
        <td>@DbPlayer2?.SoulEggs</td>
        <td>@DbPlayer2?.ProphecyEggs</td>
        <td>@DbPlayer2?.EarningsBonusPercentage</td>
        <td>@UpdatedCst2</td>
        <td>@DbPlayer2?.LLC</td>
        <td>@DbPlayer2?.MER</td>
        <td>@DbPlayer2?.JER</td>
    </tr>
    <tr>
        <td>King Sunday!</td>
        <td>@DbPlayer3?.Title</td>
        <td>@DbPlayer3?.NextTitle</td>
        <td>@ProjectedCst3</td>
        <td>@DbPlayer3?.SoulEggs</td>
        <td>@DbPlayer3?.ProphecyEggs</td>
        <td>@DbPlayer3?.EarningsBonusPercentage</td>
        <td>@UpdatedCst3</td>
        <td>@DbPlayer3?.LLC</td>
        <td>@DbPlayer3?.MER</td>
        <td>@DbPlayer3?.JER</td>
    </tr>
    <tr>
        <td>King Monday!</td>
        <td>@DbPlayer4?.Title</td>
        <td>@DbPlayer4?.NextTitle</td>
        <td>@ProjectedCst4</td>
        <td>@DbPlayer4?.SoulEggs</td>
        <td>@DbPlayer4?.ProphecyEggs</td>
        <td>@DbPlayer4?.EarningsBonusPercentage</td>
        <td>@UpdatedCst4</td>
        <td>@DbPlayer4?.LLC</td>
        <td>@DbPlayer4?.MER</td>
        <td>@DbPlayer4?.JER</td>
    </tr>
</table>

<Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Redraw</Button>

<LineChart @ref="lineChart" TItem="double" />
