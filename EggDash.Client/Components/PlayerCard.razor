@using HemSoft.EggIncTracker.Data.Dtos
@using EggDash.Client.Services
@using System.Timers
@implements IDisposable

@if (Player != null && PlayerStats != null)
{
    <MudPaper Class="@($"dashboard-tile d-flex flex-column align-center {(_allGoalsAchieved ? "goals-achieved" : "")}")"
             Style="@($"height: 100%; position: relative; overflow: hidden; {(_allGoalsAchieved ? "background-color: rgba(0, 100, 0, 0.3);" : "")}")">

        @if (_allGoalsAchieved && !_showFireworks)
        {
            <div class="goals-achieved-indicator">
                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" />
            </div>
        }

        @if (_showFireworks)
        {
            <div class="fireworks-container">
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework"></div>
                <div class="firework-particles"></div>
                <div class="firework-particles"></div>
                <div class="firework-particles"></div>
                <div class="firework-particles"></div>
                <div class="firework-particles"></div>
            </div>
        }
        <div class="mb-4 text-center">
            <MudText Typo="Typo.h4" Align="Align.Center">@Player.PlayerName</MudText> @* Removed exclamation mark for consistency *@
            <MudText Typo="Typo.body1" Align="Align.Center">
                <MudText Inline="true" Class="ml-2 align-bottom">
                    (@Player?.Title
                    @if (LastUpdatedTimestamp.HasValue && LastUpdatedTimestamp.Value != DateTime.MinValue)
                    {
                        <span> -- Last Updated: @GetLocalTimeString(LastUpdatedTimestamp)</span>
                    })
                </MudText>
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Center">
                <span class="d-inline-flex align-center mr-2">
                    <MudImage src="/assets/egg_of_prophecy.webp" Width="24" Height="24" Style="vertical-align: middle;">
                    </MudImage>
                    @Player?.ProphecyEggs
                </span>
                <span class="d-inline-flex align-center mr-2">
                    <MudImage src="/assets/egg_soul.webp" Width="24" Height="24" Style="vertical-align: middle;"></MudImage>
                    @Player?.SoulEggs
                </span>
                <span class="d-inline-flex align-center mr-2">
                    <MudImage src="/assets/chart.png" Width="24" Height="24" Style="vertical-align: middle;">
                    </MudImage>
                    @Player?.EarningsBonusPercentage
                </span>
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="Align.Center" Class="mb-2">
                <span class="d-inline-flex align-center mr-2">
                    SE/Week: (@PlayerStats?.SEPerWeek)
                </span>
                <span class="d-inline-flex align-center mr-2">
                    @if (PlayerGoals != null && !string.IsNullOrEmpty(PlayerGoals.WeeklySEGainGoal) && !string.IsNullOrEmpty(PlayerSEThisWeek))
                    {
                        var (isGoalMet, missingAmount, expectedAmount, percentComplete) = PlayerDataService.CalculateMissingSEGain(PlayerSEThisWeek, PlayerGoals.WeeklySEGainGoal);
                        string tooltipText = isGoalMet
                            ? $"Goal met! Current progress: {PlayerSEThisWeek} / Expected: {expectedAmount} ({percentComplete}%)"
                            : $"Missing {missingAmount} to reach today's goal of {expectedAmount} ({percentComplete}%)";

                        <MudTooltip Text="@tooltipText" Arrow="true" Placement="Placement.Top">
                            <span>
                                SE This Week: <span style="@PlayerDataService.GetSEProgressColorStyle(PlayerSEThisWeek, PlayerGoals.WeeklySEGainGoal)">@PlayerSEThisWeek</span>
                                @if (isGoalMet)
                                {
                                    <MudIcon Icon="@Icons.Material.Outlined.Check" Size="Size.Small" Color="Color.Success" Class="ml-1"></MudIcon>
                                }
                            </span>
                        </MudTooltip>
                    }
                    else
                    {
                        <span>SE This Week: @PlayerSEThisWeek</span>
                    }
                </span>
                <span class="d-inline-flex align-center mr-2">
                    Prestiges Today/Week:
                    @if (PlayerGoals is { DailyPrestigeGoal: > 0 })
                    {
                        var (isDailyGoalMet, missingDailyPrestiges, expectedDailyPrestiges, dailyPercentComplete) = PlayerDataService.CalculateMissingDailyPrestiges(Player?.PrestigesToday, PlayerGoals.DailyPrestigeGoal);
                        string dailyTooltipText = isDailyGoalMet
                            ? $"Goal met! Current progress: {Player?.PrestigesToday} / Expected: {expectedDailyPrestiges} ({dailyPercentComplete}%)"
                            : $"Missing {missingDailyPrestiges} prestiges to reach today's goal of {expectedDailyPrestiges} ({dailyPercentComplete}%)";
                        <MudTooltip Text="@dailyTooltipText" Arrow="true" Placement="Placement.Top">
                            <span>
                                <span style="@GetProgressColorStyle(Player?.PrestigesToday, PlayerGoals.DailyPrestigeGoal)">
                                    @Player?.PrestigesToday
                                </span>
                                @if (isDailyGoalMet)
                                {
                                    <MudIcon Icon="@Icons.Material.Outlined.Check" Size="Size.Small"
                                        Color="Color.Success" Class="ml-1"></MudIcon>
                                }
                            </span>
                        </MudTooltip>
                        <span> / </span>
                        var (isWeeklyGoalMet, missingWeeklyPrestiges, expectedWeeklyPrestiges, weeklyPercentComplete) = PlayerDataService.CalculateMissingPrestiges(Player?.PrestigesThisWeek, PlayerGoals.DailyPrestigeGoal);
                        string weeklyTooltipText = isWeeklyGoalMet
                            ? $"Goal met! Current progress: {Player?.PrestigesThisWeek} / Expected: {expectedWeeklyPrestiges} ({weeklyPercentComplete}%)"
                            : $"Missing {missingWeeklyPrestiges} prestiges to reach today's goal of {expectedWeeklyPrestiges} ({weeklyPercentComplete}%)";
                        <MudTooltip Text="@weeklyTooltipText" Arrow="true" Placement="Placement.Top">
                            <span>
                                <span style="@GetProgressColorStyle(Player?.PrestigesThisWeek, expectedWeeklyPrestiges)">
                                    @Player?.PrestigesThisWeek
                                </span>
                                @if (isWeeklyGoalMet)
                                {
                                    <MudIcon Icon="@Icons.Material.Outlined.Check" Size="Size.Small"
                                        Color="Color.Success" Class="ml-1"></MudIcon>
                                }
                            </span>
                        </MudTooltip>
                    }
                    else
                    {
                        <span>@Player?.PrestigesToday / @Player?.PrestigesThisWeek</span>
                    }
                </span>
            </MudText>
        </div>
        <div class="mb-2 d-flex flex-column align-center">
            <div class="donut-chart-container" style="position: relative; width: 300px; height: 300px;">
                <div class="donut-chart-progress"
                    style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                    <div style="font-size: 24px; font-weight: bold; color: white;">@Player?.TitleProgress.ToString("F2")%
                    </div>
                    <div style="font-size: 14px; color: #ccc;">Next title in @DaysToNextTitle days</div>
                </div>
                <svg width="300" height="300" viewBox="0 0 100 100">
                    <circle cx="50" cy="50" r="45" fill="transparent" stroke="#666666" stroke-width="10" />
                    <circle cx="50" cy="50" r="45" fill="transparent" stroke="#4CAF50" stroke-width="10"
                        stroke-dasharray="@(2.83 * Player?.TitleProgress ?? 0) 283" stroke-dashoffset="0"
                        transform="rotate(-90 50 50)" />
                </svg>
            </div>
        </div>
        <!---------------------->
        <!-- SE Progress Bar: -->
        <!---------------------->
        <div class="mt-n2 px-4" style="width: 100%;">
            <MudText Typo="Typo.subtitle2" Class="mb-0">
                SE (@PlayerStats?.SE) -- Rank: @((SEGoalEnd?.Ranking ?? 0) + 1)
            </MudText>
            @{
                var playerSEGoalPercentage = CalculateProgressPercentage(
                Player?.SoulEggs, SEGoalEnd?.SEString, SEGoalBegin?.SEString);
            }
            <MudProgressLinear Color="Color.Success" Value="@playerSEGoalPercentage" Max="100" Striped="false"
                Size="Size.Large" Style="height: 20px; border-radius: 4px;" Class="my-0">
                <MudText Typo="Typo.caption" Style="color: white;">
                    @playerSEGoalPercentage.ToString("F1")%
                </MudText>
            </MudProgressLinear>
            <div class="d-flex justify-space-between mt-n1">
                <MudText Typo="Typo.caption">
                    (@SEGoalBegin?.SEString) @(SEGoalBegin?.IGN?.Length > NameCutOff ?
                                    SEGoalBegin.IGN.Substring(0, NameCutOff) : SEGoalBegin?.IGN)
                                                                                            </MudText>
                                                                                            <MudText Typo="Typo.caption">
                    @(SEGoalEnd?.IGN?.Length > NameCutOff ? SEGoalEnd.IGN.Substring(0, NameCutOff) :
                                    SEGoalEnd?.IGN) (@SEGoalEnd?.SEString)
            </MudText>
        </div>
    </div>
    <!---------------------->
    <!-- EB Progress Bar: -->
    <!---------------------->
    <div class="mt-2 px-4" style="width: 100%;">
        <MudText Typo="Typo.subtitle2" Class="mb-0">
            EB (@PlayerStats?.EB) -- Rank: @(EBGoalEnd?.Ranking + 1)
        </MudText>
        @{
                var playerEBGoalPercentage = CalculateProgressPercentage(
                PlayerStats?.EB, EBGoalEnd?.EBString, EBGoalBegin?.EBString);
            }
            <MudProgressLinear Color="Color.Success" Value="@playerEBGoalPercentage" Max="100" Striped="false"
                Size="Size.Large" Style="height: 20px; border-radius: 4px;" Class="my-0">
                <MudText Typo="Typo.caption" Style="color: white;">
                    @playerEBGoalPercentage.ToString("F1")%
                </MudText>
            </MudProgressLinear>
            <div class="d-flex justify-space-between mt-n1">
                <MudText Typo="Typo.caption">
                    (@EBGoalBegin?.EBString) @(EBGoalBegin?.IGN?.Length > NameCutOff ?
                                    EBGoalBegin.IGN.Substring(0, NameCutOff) : EBGoalBegin?.IGN)
                                                                                            </MudText>
                                                                                            <MudText Typo="Typo.caption">
                    @(EBGoalEnd?.IGN?.Length > NameCutOff ? EBGoalEnd.IGN.Substring(0, NameCutOff) :
                                    EBGoalEnd?.IGN) (@EBGoalEnd?.EBString)
            </MudText>
        </div>
    </div>
    <!----------------------->
    <!-- MER Progress Bar: -->
    <!----------------------->
    <div class="mt-2 px-4" style="width: 100%;">
        <MudText Typo="Typo.subtitle2" Class="mb-0">
            MER (@PlayerStats?.MER) -- Rank: @MERGoalEnd?.Ranking
        </MudText>
        @{
                var playerMERGoalPercentage = CalculateProgressPercentage(PlayerStats?.MER.ToString(),
                MERGoalEnd?.MER.ToString(), MERGoalBegin?.MER.ToString());
            }
            <MudProgressLinear Color="Color.Success" Value="@playerMERGoalPercentage" Max="100" Striped="false"
                Size="Size.Large" Style="height: 20px; border-radius: 4px;" Class="my-0">
                <MudText Typo="Typo.caption" Style="color: white;">
                    @playerMERGoalPercentage.ToString("F1")%
                </MudText>
            </MudProgressLinear>
            <div class="d-flex justify-space-between mt-n1">
                <MudText Typo="Typo.caption">
                    (@MERGoalBegin?.MER) @(MERGoalBegin?.IGN?.Length > NameCutOff ?
                                    MERGoalBegin.IGN.Substring(0, NameCutOff) : MERGoalBegin?.IGN)
                                                                                              </MudText>
                                                                                              <MudText Typo="Typo.caption">
                    @(MERGoalEnd?.IGN?.Length > NameCutOff ? MERGoalEnd.IGN.Substring(0, NameCutOff) :
                                    MERGoalEnd?.IGN) (@MERGoalEnd?.MER)
            </MudText>
        </div>
    </div>
    <!----------------------->
    <!-- JER Progress Bar: -->
    <!----------------------->
    <div class="mt-2 px-4" style="width: 100%;">
        <MudText Typo="Typo.subtitle2" Class="mb-0">
            JER (@PlayerStats?.JER) -- Rank: @JERGoalEnd?.Ranking
        </MudText>
        @{
                var playerJERGoalPercentage = CalculateProgressPercentage(PlayerStats?.JER.ToString(),
                JERGoalEnd?.JER.ToString(), JERGoalBegin?.JER.ToString());
            }
            <MudProgressLinear Color="Color.Success" Value="@playerJERGoalPercentage" Max="100" Striped="false"
                Size="Size.Large" Style="height: 20px; border-radius: 4px;" Class="my-0">
                <MudText Typo="Typo.caption" Style="color: white;">
                    @playerJERGoalPercentage.ToString("F1")%
                </MudText>
            </MudProgressLinear>
            <div class="d-flex justify-space-between mt-n1">
                <MudText Typo="Typo.caption">
                    (@JERGoalBegin?.JER) @(JERGoalBegin?.IGN?.Length > NameCutOff ?
                                    JERGoalBegin.IGN.Substring(0, NameCutOff) : JERGoalBegin?.IGN)
                                                                                              </MudText>
                                                                                              <MudText Typo="Typo.caption">
                    @(JERGoalEnd?.IGN?.Length > NameCutOff ? JERGoalEnd.IGN.Substring(0, NameCutOff) :
                                    JERGoalEnd?.IGN) (@JERGoalEnd?.JER)
            </MudText>
        </div>
    </div>
</MudPaper>
}
else
{
    <MudPaper Class="pa-4 d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudPaper>
}


<style>
    /* Fireworks container */
    .fireworks-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 10;
    }

    /* Firework animation */
    .firework {
        position: absolute;
        width: 5px;
        height: 5px;
        border-radius: 50%;
        box-shadow: 0 0 10px 5px rgba(255, 255, 255, 0.8);
        animation: firework-animation 2s infinite;
    }

    /* Firework particles */
    .firework-particles {
        position: absolute;
        width: 3px;
        height: 3px;
        border-radius: 50%;
        box-shadow: 0 0 5px 2px rgba(255, 255, 255, 0.6);
        animation: particles-animation 3s infinite;
    }

    /* Position fireworks at different locations */
    .firework:nth-child(1) {
        top: 20%;
        left: 20%;
        animation-delay: 0s;
        background: rgba(255, 0, 0, 0.8);
    }

    .firework:nth-child(2) {
        top: 30%;
        left: 60%;
        animation-delay: 0.3s;
        background: rgba(0, 255, 0, 0.8);
    }

    .firework:nth-child(3) {
        top: 70%;
        left: 30%;
        animation-delay: 0.6s;
        background: rgba(0, 0, 255, 0.8);
    }

    .firework:nth-child(4) {
        top: 40%;
        left: 80%;
        animation-delay: 0.9s;
        background: rgba(255, 255, 0, 0.8);
    }

    .firework:nth-child(5) {
        top: 60%;
        left: 50%;
        animation-delay: 1.2s;
        background: rgba(255, 0, 255, 0.8);
    }

    .firework:nth-child(6) {
        top: 25%;
        left: 40%;
        animation-delay: 0.4s;
        background: rgba(0, 255, 255, 0.8);
    }

    .firework:nth-child(7) {
        top: 75%;
        left: 70%;
        animation-delay: 0.7s;
        background: rgba(255, 165, 0, 0.8);
    }

    .firework:nth-child(8) {
        top: 50%;
        left: 25%;
        animation-delay: 1.0s;
        background: rgba(128, 0, 128, 0.8);
    }

    .firework:nth-child(9) {
        top: 15%;
        left: 75%;
        animation-delay: 1.3s;
        background: rgba(0, 128, 0, 0.8);
    }

    .firework:nth-child(10) {
        top: 85%;
        left: 15%;
        animation-delay: 1.6s;
        background: rgba(255, 192, 203, 0.8);
    }

    /* Position particles */
    .firework-particles:nth-child(11) {
        top: 30%;
        left: 30%;
        animation-delay: 0.2s;
        background: rgba(255, 255, 255, 0.8);
    }

    .firework-particles:nth-child(12) {
        top: 40%;
        left: 70%;
        animation-delay: 0.5s;
        background: rgba(255, 255, 255, 0.8);
    }

    .firework-particles:nth-child(13) {
        top: 60%;
        left: 40%;
        animation-delay: 0.8s;
        background: rgba(255, 255, 255, 0.8);
    }

    .firework-particles:nth-child(14) {
        top: 70%;
        left: 60%;
        animation-delay: 1.1s;
        background: rgba(255, 255, 255, 0.8);
    }

    .firework-particles:nth-child(15) {
        top: 50%;
        left: 50%;
        animation-delay: 1.4s;
        background: rgba(255, 255, 255, 0.8);
    }

    /* Firework explosion animation */
    @@keyframes firework-animation {
        0% {
            transform: scale(0.1);
            opacity: 0;
        }
        50% {
            transform: scale(1);
            opacity: 1;
        }
        100% {
            transform: scale(1.5);
            opacity: 0;
        }
    }

    /* Particles animation */
    @@keyframes particles-animation {
        0% {
            transform: scale(0.1) translate(0, 0);
            opacity: 0;
        }
        25% {
            transform: scale(1) translate(20px, -30px);
            opacity: 1;
        }
        50% {
            transform: scale(0.8) translate(40px, -10px);
            opacity: 0.8;
        }
        75% {
            transform: scale(0.6) translate(10px, -40px);
            opacity: 0.6;
        }
        100% {
            transform: scale(0.4) translate(30px, -20px);
            opacity: 0;
        }
    }

    /* Success background transition */
    .goals-achieved {
        transition: background-color 1s ease-in-out;
    }

    /* Goals achieved indicator */
    .goals-achieved-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 5;
        animation: pulse 2s infinite;
    }

    /* Pulse animation for the trophy icon */
    @@keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 0.8;
        }
        50% {
            transform: scale(1.2);
            opacity: 1;
        }
        100% {
            transform: scale(1);
            opacity: 0.8;
        }
    }
</style>

@code {
    [Parameter] public PlayerDto? Player { get; set; }
    [Parameter] public PlayerStatsDto? PlayerStats { get; set; }
    [Parameter] public PlayerGoalDto? PlayerGoals { get; set; }
    [Parameter] public MajPlayerRankingDto? SEGoalBegin { get; set; }
    [Parameter] public MajPlayerRankingDto? SEGoalEnd { get; set; }
    [Parameter] public MajPlayerRankingDto? EBGoalBegin { get; set; }
    [Parameter] public MajPlayerRankingDto? EBGoalEnd { get; set; }
    [Parameter] public MajPlayerRankingDto? MERGoalBegin { get; set; }
    [Parameter] public MajPlayerRankingDto? MERGoalEnd { get; set; }
    [Parameter] public MajPlayerRankingDto? JERGoalBegin { get; set; }
    [Parameter] public MajPlayerRankingDto? JERGoalEnd { get; set; }
    [Parameter] public string? PlayerSEThisWeek { get; set; }
    [Parameter] public int DaysToNextTitle { get; set; }
    [Parameter] public DateTime? LastUpdatedTimestamp { get; set; }

    private const int NameCutOff = 10; // Or get from config/parameter if needed
    private bool _showFireworks = false;
    private bool _allGoalsAchieved = false;
    private System.Timers.Timer? _fireworksTimer;

    // Inject PlayerDataService to use its methods
    [Inject] private PlayerDataService PlayerDataService { get; set; } = default!;
    [Inject] private ILogger<PlayerCard> Logger { get; set; } = default!;

    // Removed duplicated SuffixesLazy and ParseBigNumber

    private double CalculateProgressPercentage(string? current, string? target, string? previous)
    {
        // Use the injected service's method
        return PlayerDataService.CalculateProgressPercentage(current, target, previous);
    }

    // Calculates a gradient color from red (0%) to green (100%)
    private string GetProgressColorStyle(int? actual, int goal)
    {
        if (actual == null || goal <= 0)
            return "color: rgb(255, 0, 0)"; // Default to red if no goal or actual value

        // Calculate percentage, clamping between 0 and 100
        double percentage = Math.Clamp((double)actual.Value / goal * 100, 0, 100);

        // Calculate RGB values for the gradient
        // Red component decreases from 255 to 0 as percentage increases
        int red = (int)(255 * (1 - percentage / 100.0));
        // Green component increases from 0 to 255 as percentage increases
        int green = (int)(255 * (percentage / 100.0));
        // Blue component remains 0
        int blue = 0;

        return $"color: rgb({red}, {green}, {blue})";
    }

    // Helper to format the timestamp for display
    private string GetLocalTimeString(DateTime? utcTime)
    {
        if (!utcTime.HasValue || utcTime.Value == DateTime.MinValue)
            return string.Empty; // Don't display if no valid time

        DateTime localTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime.Value, TimeZoneInfo.Local);
        if (localTime.Date == DateTime.Today) return $"Today {localTime:HH:mm}";
        if (localTime.Date == DateTime.Today.AddDays(-1)) return $"Yesterday {localTime:HH:mm}";
        return localTime.ToString("MM/dd HH:mm");
    }

    // Check if all goals are met
    private bool AreAllGoalsMet()
    {
        if (PlayerGoals == null || string.IsNullOrEmpty(PlayerGoals.WeeklySEGainGoal) || string.IsNullOrEmpty(PlayerSEThisWeek))
            return false;

        // Check SE This Week goal
        var (isSEGoalMet, _, _, _) = PlayerDataService.CalculateMissingSEGain(PlayerSEThisWeek, PlayerGoals.WeeklySEGainGoal);

        // Check Prestiges Today goal
        var (isDailyPrestigeGoalMet, _, _, _) = PlayerDataService.CalculateMissingDailyPrestiges(Player?.PrestigesToday, PlayerGoals.DailyPrestigeGoal);

        // Check Prestiges This Week goal
        var (isWeeklyPrestigeGoalMet, _, _, _) = PlayerDataService.CalculateMissingPrestiges(Player?.PrestigesThisWeek, PlayerGoals.DailyPrestigeGoal);

        return isSEGoalMet && isDailyPrestigeGoalMet && isWeeklyPrestigeGoalMet;
    }

    protected override void OnInitialized()
    {
        CheckGoalsAndShowFireworks();
    }

    protected override void OnParametersSet()
    {
        // Check goals whenever parameters change
        CheckGoalsAndShowFireworks();
    }

    private void CheckGoalsAndShowFireworks()
    {
        // Check if all goals are met
        bool wereGoalsAchieved = _allGoalsAchieved;
        _allGoalsAchieved = AreAllGoalsMet();

        // Only show fireworks if goals were just achieved (not previously achieved)
        if (_allGoalsAchieved && !wereGoalsAchieved && !_showFireworks)
        {
            _showFireworks = true;

            // Create a timer to hide the fireworks after 30 seconds
            _fireworksTimer?.Dispose(); // Dispose any existing timer
            _fireworksTimer = new System.Timers.Timer(30000);
            _fireworksTimer.Elapsed += (sender, e) => {
                _showFireworks = false;
                _fireworksTimer?.Stop();
                _fireworksTimer?.Dispose();
                _fireworksTimer = null;
                StateHasChanged();
            };
            _fireworksTimer.AutoReset = false;
            _fireworksTimer.Start();

            Logger.LogInformation($"All goals met for {Player?.PlayerName}! Showing fireworks for 30 seconds.");
        }
    }

    public void Dispose()
    {
        _fireworksTimer?.Stop();
        _fireworksTimer?.Dispose();
    }
}
